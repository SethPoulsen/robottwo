  DECLARE PLUGIN "robottwo_plugin"

{
(* open Ltac_plugin *)
open Pp
(* This module defines the types of arguments to be used in the
   EXTEND directives below, for example the string one. *)
open Stdarg

let tex_endl = Pp.str ". \\\\ " ;;

let texify pp =
  let s = Pp.string_of_ppcmds pp in
  let s = Str.global_replace (Str.regexp ":") "\\in" s in
  let s = Str.global_replace (Str.regexp "Z") "\\mathbb{Z}" s in
  let s = Str.global_replace (Str.regexp "exists") "\\exists" s in
  let s = Str.global_replace (Str.regexp "->") "\\rightarrow" s in
    Pp.str ("$" ^ s ^ "$")
;;

let get_evar_name goal =
  let s = Pp.string_of_ppcmds goal in
  let i = (String.index s ' ') + 1 in (* TODO properly extract existential variable name *)
    Pp.str (String.sub s i 1)
;;

let get_state pstate =
  let sigma, env = Declare.Proof.get_current_context pstate in
  let debug sigma = Termops.pr_evar_map ~with_univs:true None env sigma in
    (strbrk "State: " ++ debug sigma)
;;

let extract_main_goal pstate =
  let state = get_state pstate in
  (* TODO: really ugly hack just grabs the goal statement as a string, in the
           future we should extract it from the data structure properly. *)
  let s = Pp.string_of_ppcmds state in
  let start, finish = (String.index s '-') + 2, (String.index s ']') in
    Pp.str (String.sub s start (finish - start))
;;

let extract_hypothesis goal =
  let s = Pp.string_of_ppcmds goal in
  let len = (String.index s '-') - 1 in
    Pp.str (String.sub s 0 len)
;;

let preexplain_intro pstate i =
  (* TODO actually extract the type of the introduced variable, don't just assume *)
  match Pp.string_of_ppcmds (Ppconstr.pr_id i) with
  | "H" -> let goal = extract_main_goal pstate in
          let assumption = extract_hypothesis goal in
              Feedback.msg_notice (Pp.str "Assume that " ++ assumption ++ Pp.str ". We will refer to this assumption as $H$" ++ tex_endl)
  | _   -> Feedback.msg_notice ((Pp.str "Let ") ++ texify (Ppconstr.pr_id i) ++ (Pp.str " be an arbitrary element of $\\mathbb{Z}$") ++ tex_endl)
;;
}


VERNAC COMMAND EXTEND PreExplain CLASSIFIED AS QUERY
| ![ proof_query ] [ "PreExplain" "intro" ident(i)] ->
  { fun ~pstate -> preexplain_intro pstate i }
| ![ proof_query ] [ "PreExplain" "exists" int(n)] ->
  { fun ~pstate ->
    let goal = extract_main_goal pstate in
      Feedback.msg_notice (Pp.str "Choose " ++ texify (get_evar_name goal) ++ Pp.str " to be " ++ texify (Pp.int n) ++ tex_endl)
  }
| ![ proof_query ] [ "PreExplain" "exists" ident(i)] ->
  { fun ~pstate ->
    let goal = extract_main_goal pstate in
      Feedback.msg_notice (Pp.str "Choose " ++ texify (get_evar_name goal) ++ Pp.str " to be " ++ texify (Ppconstr.pr_id i) ++ tex_endl)
  }
| ![ proof_query ] [ "PreExplain" "unfold" ident(i) ] ->
  { fun ~pstate -> () }
| ![ proof_query ] [ "PreExplain" "ring" ] ->
  { fun ~pstate -> () }
| ![ proof_query ] [ "PreExplain" "destruct" ident(h) ] ->
  { fun ~pstate -> () }
| ![ proof_query ] [ "PreExplain" "rewrite" ident(h) ] ->
  { fun ~pstate -> () }
END


VERNAC COMMAND EXTEND PostExplain CLASSIFIED AS QUERY
| ![ proof_query ] [ "PostExplain" "intro" ident(i)] ->
  { fun ~pstate ->
    let goal = extract_main_goal pstate in
      Feedback.msg_notice (Pp.str "Now we must show that " ++ texify goal ++ tex_endl)
  }
| ![ proof_query ] [ "PostExplain" "exists" int(n)] ->
  { fun ~pstate ->
    let goal = extract_main_goal pstate in
      Feedback.msg_notice (Pp.str "Now we must show that " ++ texify goal ++ tex_endl)
  }
| ![ proof_query ] [ "PostExplain" "exists" ident(i)] ->
  { fun ~pstate ->
    let goal = extract_main_goal pstate in
      Feedback.msg_notice (Pp.str "Now we must show that " ++ texify goal ++ tex_endl)
  }
| ![ proof_query ] [ "PostExplain" "unfold" ident(i) ] ->
  { fun ~pstate -> let goal = extract_main_goal pstate in
      Feedback.msg_notice (Pp.str "Which by the definition of " ++ Ppconstr.pr_id i ++ Pp.str " means we need to show that " ++ texify goal ++ tex_endl)
  }
| ![ proof_query ] [ "PostExplain" "ring" ] ->
  { fun ~pstate ->
    Feedback.msg_notice (Pp.str "By algebraic simplification, this is clearly true" ++ tex_endl)
  }
| ![ proof_query ] [ "PostExplain" "destruct" ident(h) ] ->
  { fun ~pstate ->
      (* TODO: HACK, hardcoded to only work in one special case. Need to figure out how to access information in context properly *)
      Feedback.msg_notice (Pp.str "Let $x$ be the value that makes " ++ texify (Ppconstr.pr_id h) ++ Pp.str " true" ++ tex_endl)
  }
| ![ proof_query ] [ "PostExplain" "rewrite" ident(h) ] ->
  { fun ~pstate ->
    let goal = extract_main_goal pstate in
      (* TODO: figure out better natural language for referring to things in the context.*)
      Feedback.msg_notice (Pp.str "By " ++ texify (Ppconstr.pr_id h) ++ Pp.str ", this is equivalent to showing " ++ texify goal ++ tex_endl) }
END
