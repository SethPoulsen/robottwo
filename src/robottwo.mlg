  DECLARE PLUGIN "robottwo_plugin"

{

(* If we forget this line and include our own tactic definition using
  TACTIC EXTEND, as below, then we get the strange error message
  no implementation available for Tacentries, only when compiling
  theories/Loader.v
*)
(* open Ltac_plugin *)
open Pp
(* This module defines the types of arguments to be used in the
   EXTEND directives below, for example the string one. *)
open Stdarg

let extract_main_goal pstate =
  let sigma, env = Declare.Proof.get_current_context pstate in
  let debug sigma = Termops.pr_evar_map ~with_univs:true None env sigma in
  let state = (strbrk "State: " ++ debug sigma) in
  let s = Pp.string_of_ppcmds state in
  let start, finish = (String.index s '-') + 1, (String.index s ']') in
    Pp.str (String.sub s start (finish - start))
  ;;

}


VERNAC COMMAND EXTEND PreExplain CLASSIFIED AS QUERY
| ![ proof_query ] [ "PreExplain" "intro" ident(i)] ->
  { fun ~pstate ->
      Feedback.msg_notice ((Pp.str "Let ") ++ Ppconstr.pr_id i ++ (Pp.str " be an arbitrary Integer"))
  }
| ![ proof_query ] [ "PreExplain" "exists" nat(n)] ->
  { fun ~pstate -> Feedback.msg_notice (Pp.str "") }
| ![ proof_query ] [ "PreExplain" "unfold" ident(i) ] ->
  { fun ~pstate -> Feedback.msg_notice (Pp.str "") }
| ![ proof_query ] [ "PreExplain" "ring" ] ->
  { fun ~pstate -> Feedback.msg_notice (Pp.str "") }
END


VERNAC COMMAND EXTEND PostExplain CLASSIFIED AS QUERY
| ![ proof_query ] [ "PostExplain" "intro" ident(i)] ->
  { fun ~pstate ->
    let goal = extract_main_goal pstate in
      Feedback.msg_notice (Pp.str "Now we must show that " ++ goal)
  }
| ![ proof_query ] [ "PostExplain" "exists" nat(n)] ->
  { fun ~pstate -> Feedback.msg_notice (Pp.str "")
  (* ; let sigma, env = Declare.Proof.get_current_context pstate in
  let debug sigma = Termops.pr_evar_map ~with_univs:true None env sigma in
    Feedback.msg_notice (strbrk "State: " ++ debug sigma) *)
 }
| ![ proof_query ] [ "PostExplain" "unfold" ident(i) ] ->
  { fun ~pstate -> Feedback.msg_notice (Pp.str "")
  (* ; let sigma, env = Declare.Proof.get_current_context pstate in
  let debug sigma = Termops.pr_evar_map ~with_univs:true None env sigma in
    Feedback.msg_notice (strbrk "State: " ++ debug sigma) *)
 }
| ![ proof_query ] [ "PostExplain" "ring" ] ->
  { fun ~pstate -> Feedback.msg_notice (Pp.str "")
  (* ; let sigma, env = Declare.Proof.get_current_context pstate in
  let debug sigma = Termops.pr_evar_map ~with_univs:true None env sigma in
    Feedback.msg_notice (strbrk "State: " ++ debug sigma) *)
 }
END
